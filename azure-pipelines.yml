# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - .gitignore
      - CODE_OF_CONDUCT.md
      - LICENSE.md
      - README.md
      - README.zh-cn.md
      - NuGet.Config
      - .github/*

# PR always trigger build
pr:
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'windows-latest'

variables:
  DOTNET_NOLOGO: true

steps:

# need this here in order to persist GitHub credentials 
# only need the latest commit
- checkout: self

- script: |
    git config --global user.email 'nanoframework@outlook.com'
    git config --global user.name 'nfbot'
    git config --global core.autocrlf true
  displayName: Setup git identity

- task: Cache@2
  displayName: Cache NuGet packages
  condition: succeeded()
  continueOnError: true
  inputs:
    key: 'nuget | **/packages.config'
    path: $(UserProfile)/.nuget/packages

- task: InstallNanoMSBuildComponents@1
  displayName: Install nanoFramework MSBuild components
  inputs:
    GitHubToken: $(GitHubToken)

# only build solutions that were changed
- task: PowerShell@2
  displayName: Build solutions
  inputs:
    targetType: 'filePath'
    filePath: '$(System.DefaultWorkingDirectory)\.pipeline-assets\build-solutions.ps1'
    failOnStderr: true
  env:
    MY_GITHUBTOKEN: $(GitHubToken)

# Adjust the readmes
- task: DotNetCoreCLI@2
  displayName: Adjust READMEs
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  inputs:
    command: custom
    custom: run
    projects: '**/device-listing.csproj'
    workingDirectory: 'Samples'

- task: PowerShell@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  displayName: Push READMEs to GitHub
  continueOnError: true
  inputs:
    targetType: 'inline'
    workingDirectory: 'Samples'
    script: |
      git add README.md
      git add README.zh-cn.md
      git commit -m "Update READMEs" -m"***NO_CI***"

      Write-Host "Rebasing..."
      
      git rebase origin/main

      Write-Host "Pushing READMEs to $(Build.SourceBranchName)"

      # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
      # 'encoded token' is the Base64 of the string "nfbot:personal-token"
      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)")))"
      git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
